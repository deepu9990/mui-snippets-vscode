{
  "muiDataGrid": {
    "prefix": [
      "muiDataGrid",
      "mui_data_grid",
      "muidatagrid"
    ],
    "body": [
      "const columns = [",
      "  { field: 'id', headerName: 'ID', width: ${1:70} },",
      "  { field: 'firstName', headerName: '${2:First name}', width: ${3:130} },",
      "  { field: 'lastName', headerName: '${4:Last name}', width: ${5:130} },",
      "  {",
      "    field: 'age',",
      "    headerName: '${6:Age}',",
      "    type: 'number',",
      "    width: ${7:90},",
      "  },",
      "  {",
      "    field: 'fullName',",
      "    headerName: '${8:Full name}',",
      "    description: '${9:This column has a value getter and is not sortable.}',",
      "    sortable: false,",
      "    width: ${10:160},",
      "    valueGetter: (params) =>",
      "      `${params.row.firstName || ''} ${params.row.lastName || ''}`,",
      "  },",
      "];",
      "const rows = [",
      "  { id: 1, lastName: 'Snow', firstName: 'Jon', age: 35 },",
      "  { id: 2, lastName: 'Lannister', firstName: 'Cersei', age: 42 },",
      "  { id: 3, lastName: 'Lannister', firstName: 'Jaime', age: 45 },",
      "];",
      "<DataGrid",
      "  rows={${11:rows}}",
      "  columns={columns}",
      "  initialState={{",
      "    pagination: {",
      "      paginationModel: { page: 0, pageSize: ${12:5} },",
      "    },",
      "  }}",
      "  pageSizeOptions={[${13:5, 10}]}",
      "  checkboxSelection",
      "  disableRowSelectionOnClick",
      "  sx={{ height: ${14:400}, width: '100%' }}",
      "/>"
    ],
    "description": "Material UI DataGrid with columns, rows, and pagination (check required imports)"
  },
  "muiDataGridPro": {
    "prefix": [
      "muiDataGridPro",
      "mui_data_grid_pro",
      "muidatagridpro"
    ],
    "body": [
      "const columns = [",
      "  { field: 'id', headerName: 'ID', width: 70 },",
      "  { field: 'name', headerName: '${1:Name}', width: 200 },",
      "  { field: 'category', headerName: '${2:Category}', width: 150 },",
      "  { field: 'price', headerName: '${3:Price}', type: 'number', width: 100 },",
      "];",
      "<DataGridPro",
      "  rows={${4:rows}}",
      "  columns={columns}",
      "  treeData",
      "  getTreeDataPath={(row) => row.${5:hierarchy}}",
      "  groupingColDef={{",
      "    headerName: '${6:Group}',",
      "    width: 200,",
      "  }}",
      "  defaultGroupingExpansionDepth={${7:1}}",
      "  initialState={{",
      "    pagination: {",
      "      paginationModel: { page: 0, pageSize: 10 },",
      "    },",
      "  }}",
      "  pageSizeOptions={[10, 25, 50]}",
      "  checkboxSelection",
      "  sx={{ height: 600, width: '100%' }}",
      "/>"
    ],
    "description": "Material UI DataGridPro with tree data and grouping (check required imports)"
  },
  "muiDatePicker": {
    "prefix": [
      "muiDatePicker",
      "mui_date_picker",
      "muidatepicker"
    ],
    "body": [
      "<LocalizationProvider dateAdapter={AdapterDateFns}>",
      "  <DatePicker",
      "    label=\"${1:Select Date}\"",
      "    value={${2:value}}",
      "    onChange={${3:setValue}}",
      "    renderInput={(params) => <TextField {...params} />}",
      "    minDate={${4:new Date('2020-01-01')}}",
      "    maxDate={${5:new Date('2030-12-31')}}",
      "    views={[${6:'year', 'month', 'day'}]}",
      "    openTo=\"${7|year,month,day|}\"",
      "    disableFuture={${8:false}}",
      "    disablePast={${9:false}}",
      "  />",
      "</LocalizationProvider>"
    ],
    "description": "Material UI DatePicker with LocalizationProvider (check required imports)"
  },
  "muiTimePicker": {
    "prefix": [
      "muiTimePicker",
      "mui_time_picker",
      "muitimepicker"
    ],
    "body": [
      "<LocalizationProvider dateAdapter={AdapterDateFns}>",
      "  <TimePicker",
      "    label=\"${1:Select Time}\"",
      "    value={${2:value}}",
      "    onChange={${3:setValue}}",
      "    renderInput={(params) => <TextField {...params} />}",
      "    views={[${4:'hours', 'minutes', 'seconds'}]}",
      "    ampm={${5:true}}",
      "    minutesStep={${6:5}}",
      "  />",
      "</LocalizationProvider>"
    ],
    "description": "Material UI TimePicker component (check required imports)"
  },
  "muiDateTimePicker": {
    "prefix": [
      "muiDateTimePicker",
      "mui_date_time_picker",
      "muidatetimepicker"
    ],
    "body": [
      "<LocalizationProvider dateAdapter={AdapterDateFns}>",
      "  <DateTimePicker",
      "    label=\"${1:Select Date & Time}\"",
      "    value={${2:value}}",
      "    onChange={${3:setValue}}",
      "    renderInput={(params) => <TextField {...params} />}",
      "    ampm={${4:true}}",
      "    minutesStep={${5:5}}",
      "    disableFuture={${6:false}}",
      "    disablePast={${7:false}}",
      "  />",
      "</LocalizationProvider>"
    ],
    "description": "Material UI DateTimePicker component (check required imports)"
  },
  "muiDateRangePicker": {
    "prefix": [
      "muiDateRangePicker",
      "mui_date_range_picker",
      "muidaterangepicker"
    ],
    "body": [
      "<LocalizationProvider dateAdapter={AdapterDateFns}>",
      "  <DateRangePicker",
      "    startText=\"${1:Check-in}\"",
      "    endText=\"${2:Check-out}\"",
      "    value={${3:value}}",
      "    onChange={${4:setValue}}",
      "    renderInput={(startProps, endProps) => (",
      "      <>",
      "        <TextField {...startProps} />",
      "        <Box sx={{ mx: 2 }}> to </Box>",
      "        <TextField {...endProps} />",
      "      </>",
      "    )}",
      "  />",
      "</LocalizationProvider>"
    ],
    "description": "Material UI DateRangePicker (Pro) component (check required imports)"
  },
  "muiTreeView": {
    "prefix": [
      "muiTreeView",
      "mui_tree_view",
      "muitreeview"
    ],
    "body": [
      "<TreeView",
      "  aria-label=\"${1:file system navigator}\"",
      "  defaultCollapseIcon={<ExpandMore />}",
      "  defaultExpandIcon={<ChevronRight />}",
      "  sx={{ height: ${2:240}, flexGrow: 1, maxWidth: ${3:400}, overflowY: 'auto' }}",
      ">",
      "  <TreeItem nodeId=\"${4:1}\" label=\"${5:Applications}\">",
      "    <TreeItem nodeId=\"${6:2}\" label=\"${7:Calendar}\" />",
      "    <TreeItem nodeId=\"${8:3}\" label=\"${9:Chrome}\" />",
      "    <TreeItem nodeId=\"${10:4}\" label=\"${11:Webstorm}\" />",
      "  </TreeItem>",
      "  <TreeItem nodeId=\"${12:5}\" label=\"${13:Documents}\">",
      "    <TreeItem nodeId=\"${14:6}\" label=\"${15:Material-UI}\">",
      "      <TreeItem nodeId=\"${16:7}\" label=\"${17:src}\">",
      "        <TreeItem nodeId=\"${18:8}\" label=\"${19:index.js}\" />",
      "        <TreeItem nodeId=\"${20:9}\" label=\"${21:tree-view.js}\" />",
      "      </TreeItem>",
      "    </TreeItem>",
      "  </TreeItem>",
      "</TreeView>"
    ],
    "description": "Material UI TreeView with TreeItem components (check required imports)"
  },
  "muiAutocompleteMultiple": {
    "prefix": [
      "muiAutocompleteMultiple",
      "mui_autocomplete_multiple",
      "muiautocompletemultiple"
    ],
    "body": [
      "<Autocomplete",
      "  multiple",
      "  id=\"${1:tags-filled}\"",
      "  options={${2:options}}",
      "  getOptionLabel={(option) => option.${3:title}}",
      "  value={${4:value}}",
      "  onChange={${5:handleChange}}",
      "  filterSelectedOptions",
      "  renderTags={(value, getTagProps) =>",
      "    value.map((option, index) => (",
      "      <Chip variant=\"outlined\" label={option.${3:title}} {...getTagProps({ index })} />",
      "    ))",
      "  }",
      "  renderInput={(params) => (",
      "    <TextField",
      "      {...params}",
      "      variant=\"${6|filled,outlined,standard|}\"",
      "      label=\"${7:filterSelectedOptions}\"",
      "      placeholder=\"${8:Select options}\"",
      "    />",
      "  )}",
      "/>"
    ],
    "description": "Material UI Autocomplete with multiple selection and chips (check required imports)"
  },
  "muiDataGridToolbar": {
    "prefix": [
      "muiDataGridToolbar",
      "mui_data_grid_toolbar",
      "muidatagridtoolbar"
    ],
    "body": [
      "<DataGrid",
      "  rows={${1:rows}}",
      "  columns={${2:columns}}",
      "  components={{",
      "    Toolbar: GridToolbar,",
      "  }}",
      "  componentsProps={{",
      "    toolbar: {",
      "      showQuickFilter: true,",
      "      quickFilterProps: { debounceMs: 500 },",
      "    },",
      "  }}",
      "  sx={{ height: ${3:400}, width: '100%' }}",
      "/>"
    ],
    "description": "Material UI DataGrid with built-in toolbar (check required imports)"
  },
  "muiDataGridCustomActions": {
    "prefix": [
      "muiDataGridCustomActions",
      "mui_data_grid_custom_actions",
      "muidatagridcustomactions"
    ],
    "body": [
      "const columns = [",
      "  { field: 'id', headerName: 'ID', width: 70 },",
      "  { field: 'name', headerName: '${1:Name}', width: 200 },",
      "  {",
      "    field: 'actions',",
      "    type: 'actions',",
      "    headerName: '${2:Actions}',",
      "    width: 100,",
      "    cellClassName: 'actions',",
      "    getActions: ({ id }) => {",
      "      return [",
      "        <GridActionsCellItem",
      "          icon={<Edit />}",
      "          label=\"Edit\"",
      "          className=\"textPrimary\"",
      "          onClick={() => ${3:handleEditClick(id)}}",
      "          color=\"inherit\"",
      "        />,",
      "        <GridActionsCellItem",
      "          icon={<Visibility />}",
      "          label=\"View\"",
      "          onClick={() => ${4:handleViewClick(id)}}",
      "          color=\"inherit\"",
      "        />,",
      "        <GridActionsCellItem",
      "          icon={<Delete />}",
      "          label=\"Delete\"",
      "          onClick={() => ${5:handleDeleteClick(id)}}",
      "          color=\"inherit\"",
      "        />,",
      "      ];",
      "    },",
      "  },",
      "];",
      "<DataGrid",
      "  rows={${6:rows}}",
      "  columns={columns}",
      "  sx={{ height: 400, width: '100%' }}",
      "/>"
    ],
    "description": "Material UI DataGrid with custom action buttons (check required imports)"
  }
}
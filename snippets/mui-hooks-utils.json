{
  "muiUseTheme": {
    "prefix": [
      "muiUseTheme",
      "mui_use_theme",
      "muiusetheme"
    ],
    "body": [
      "const theme = useTheme();",
      "// Access theme properties:",
      "// theme.palette.primary.main",
      "// theme.spacing(2)",
      "// theme.breakpoints.up('md')",
      "// theme.typography.h1"
    ],
    "description": "Material UI useTheme hook to access theme object (check required imports)"
  },
  "muiUseMediaQuery": {
    "prefix": [
      "muiUseMediaQuery",
      "mui_use_media_query",
      "muiusemediaquery"
    ],
    "body": [
      "const theme = useTheme();",
      "const ${1:isMobile} = useMediaQuery(theme.breakpoints.down('${2|xs,sm,md,lg,xl|}'));",
      "const ${3:isTablet} = useMediaQuery(theme.breakpoints.between('${4:sm}', '${5:md}'));",
      "const ${6:isDesktop} = useMediaQuery(theme.breakpoints.up('${7:lg}'));"
    ],
    "description": "Material UI useMediaQuery hook for responsive design (check required imports)"
  },
  "muiCreateTheme": {
    "prefix": [
      "muiCreateTheme",
      "mui_create_theme",
      "muicreatetheme"
    ],
    "body": [
      "const theme = createTheme({",
      "  palette: {",
      "    mode: '${1|light,dark|}',",
      "    primary: {",
      "      main: '${2:#1976d2}',",
      "    },",
      "    secondary: {",
      "      main: '${3:#dc004e}',",
      "    },",
      "    background: {",
      "      default: '${4:#f5f5f5}',",
      "    },",
      "  },",
      "  typography: {",
      "    fontFamily: '${5:\"Roboto\", \"Helvetica\", \"Arial\", sans-serif}',",
      "    h1: {",
      "      fontSize: '${6:2.5rem}',",
      "      fontWeight: ${7:500},",
      "    },",
      "  },",
      "  spacing: ${8:8},",
      "  breakpoints: {",
      "    values: {",
      "      xs: ${9:0},",
      "      sm: ${10:600},",
      "      md: ${11:900},",
      "      lg: ${12:1200},",
      "      xl: ${13:1536},",
      "    },",
      "  },",
      "});",
      "<ThemeProvider theme={theme}>",
      "  ${14:/* Your app components */}",
      "</ThemeProvider>"
    ],
    "description": "Material UI createTheme with ThemeProvider setup (check required imports)"
  },
  "muiThemeToggler": {
    "prefix": [
      "muiThemeToggler",
      "mui_theme_toggler",
      "muithemetoggler"
    ],
    "body": [
      "const [darkMode, setDarkMode] = useState(${1:false});",
      "const theme = useMemo(",
      "  () =>",
      "    createTheme({",
      "      palette: {",
      "        mode: darkMode ? 'dark' : 'light',",
      "        primary: {",
      "          main: '${2:#1976d2}',",
      "        },",
      "        secondary: {",
      "          main: '${3:#dc004e}',",
      "        },",
      "      },",
      "    }),",
      "  [darkMode]",
      ");",
      "const toggleDarkMode = () => {",
      "  setDarkMode(!darkMode);",
      "};",
      "<ThemeProvider theme={theme}>",
      "  <IconButton onClick={toggleDarkMode} color=\"inherit\">",
      "    {darkMode ? <Brightness7 /> : <Brightness4 />}",
      "  </IconButton>",
      "  ${4:/* Your app components */}",
      "</ThemeProvider>"
    ],
    "description": "Material UI dark/light theme toggler with state management (check required imports)"
  },
  "muiStyled": {
    "prefix": [
      "muiStyled",
      "mui_styled",
      "muistyled"
    ],
    "body": [
      "const ${2:StyledComponent} = styled(${1:Box})(({ theme }) => ({",
      "  ${3:padding: theme.spacing(2),}",
      "  ${4:backgroundColor: theme.palette.primary.main,}",
      "  ${5:color: theme.palette.primary.contrastText,}",
      "  ${6:'&:hover': {",
      "    backgroundColor: theme.palette.primary.dark,",
      "  },}",
      "  ${7:[theme.breakpoints.down('md')]: {",
      "    padding: theme.spacing(1),",
      "  },}",
      "}));"
    ],
    "description": "Material UI styled component with theme access (check required imports)"
  },
  "muiSx": {
    "prefix": [
      "muiSx",
      "mui_sx",
      "muisx"
    ],
    "body": [
      "sx={{",
      "  ${1:p: 2,} // padding",
      "  ${2:m: 1,} // margin",
      "  ${3:backgroundColor: 'primary.main',}",
      "  ${4:color: 'primary.contrastText',}",
      "  ${5:borderRadius: 1,}",
      "  ${6:boxShadow: 1,}",
      "  ${7:'&:hover': {",
      "    backgroundColor: 'primary.dark',",
      "  },}",
      "  ${8:[theme.breakpoints.down('md')]: {",
      "    p: 1,",
      "  },}",
      "}}"
    ],
    "description": "Material UI sx prop with common styling patterns (check required imports)"
  },
  "muiColorMode": {
    "prefix": [
      "muiColorMode",
      "mui_color_mode",
      "muicolormode"
    ],
    "body": [
      "function ColorModeToggle() {",
      "  const { mode, setMode } = useColorScheme();",
      "  return (",
      "    <Button",
      "      onClick={() => {",
      "        setMode(mode === 'light' ? 'dark' : 'light');",
      "      }}",
      "    >",
      "      {mode === 'light' ? '${1:Dark}' : '${2:Light}'} mode",
      "    </Button>",
      "  );",
      "}"
    ],
    "description": "Material UI color scheme toggle using useColorScheme (check required imports)"
  },
  "muiCssBaseline": {
    "prefix": [
      "muiCssBaseline",
      "mui_css_baseline",
      "muicssbaseline"
    ],
    "body": [
      "const theme = createTheme({",
      "  // Your theme configuration",
      "});",
      "<ThemeProvider theme={theme}>",
      "  <CssBaseline />",
      "  ${1:/* Your app components */}",
      "</ThemeProvider>"
    ],
    "description": "Material UI CssBaseline for consistent CSS reset (check required imports)"
  },
  "muiResponsiveValue": {
    "prefix": [
      "muiResponsiveValue",
      "mui_responsive_value",
      "muiresponsivevalue"
    ],
    "body": [
      "// Responsive values in sx prop",
      "sx={{",
      "  ${1:width}: {",
      "    xs: ${2:'100%'}, // 0px and up",
      "    sm: ${3:'80%'},  // 600px and up",
      "    md: ${4:'60%'},  // 900px and up",
      "    lg: ${5:'40%'},  // 1200px and up",
      "    xl: ${6:'20%'},  // 1536px and up",
      "  },",
      "  ${7:fontSize}: {",
      "    xs: ${8:'0.8rem'},",
      "    md: ${9:'1rem'},",
      "  },",
      "}}"
    ],
    "description": "Material UI responsive values for breakpoints in sx prop (check required imports)"
  },
  "muiLocalizationProvider": {
    "prefix": [
      "muiLocalizationProvider",
      "mui_localization_provider",
      "muilocalizationprovider"
    ],
    "body": [
      "<LocalizationProvider dateAdapter={AdapterDateFns}>",
      "  <DatePicker",
      "    label=\"${1:Select Date}\"",
      "    value={${2:value}}",
      "    onChange={${3:setValue}}",
      "    renderInput={(params) => <TextField {...params} />}",
      "  />",
      "</LocalizationProvider>"
    ],
    "description": "Material UI LocalizationProvider for date pickers (check required imports)"
  },
  "muiGlobalStyles": {
    "prefix": [
      "muiGlobalStyles",
      "mui_global_styles",
      "muiglobalstyles"
    ],
    "body": [
      "<GlobalStyles",
      "  styles={{",
      "    body: {",
      "      ${1:margin: 0,}",
      "      ${2:padding: 0,}",
      "      ${3:fontFamily: '\"Roboto\", \"Helvetica\", \"Arial\", sans-serif',}",
      "    },",
      "    '${4:.custom-class}': {",
      "      ${5:color: 'red',}",
      "    },",
      "  }}",
      "/>"
    ],
    "description": "Material UI GlobalStyles component for global CSS (check required imports)"
  },
  "muiContainer": {
    "prefix": [
      "muiContainer",
      "mui_container",
      "muicontainer"
    ],
    "body": [
      "<Container",
      "  maxWidth=\"${1|xs,sm,md,lg,xl,false|}\"",
      "  fixed={${2:false}}",
      "  disableGutters={${3:false}}",
      "  sx={{",
      "    ${4:py: 2,}",
      "    ${5:px: 2,}",
      "  }}",
      ">",
      "  ${6:/* Container content */}",
      "</Container>"
    ],
    "description": "Material UI Container component with responsive maxWidth (check required imports)"
  },
  "muiStack": {
    "prefix": [
      "muiStack",
      "mui_stack",
      "muistack"
    ],
    "body": [
      "<Stack",
      "  direction=\"${1|row,column,row-reverse,column-reverse|}\"",
      "  spacing={${2:2}}",
      "  alignItems=\"${3|flex-start,center,flex-end,stretch,baseline|}\"",
      "  justifyContent=\"${4|flex-start,center,flex-end,space-between,space-around,space-evenly|}\"",
      "  sx={{",
      "    ${5:width: '100%',}",
      "  }}",
      ">",
      "  ${6:/* Stack children */}",
      "</Stack>"
    ],
    "description": "Material UI Stack component for one-dimensional layouts (check required imports)"
  }
}